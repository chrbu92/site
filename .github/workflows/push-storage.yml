name: Deploy Website to GCS
run-name: ${{ github.actor }} is deploying website 🚀
on: 
  workflow_dispatch:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 'prod'
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - id: 'checkout'
      uses: 'actions/checkout@v4'

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/871402321197/locations/global/workloadIdentityPools/default-workload-pool/providers/default-workload-pool'
        service_account: 'gh-svc@planeproof-7ad94.iam.gserviceaccount.com'
        
    - id: 'upload-website'
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: '.'
        destination: 'cbulloss'
        predefinedAcl: 'publicRead'
        process_gcloudignore: true
        parent: false

    - name: 'Clean up old files'
      run: |
        TOKEN=$(gcloud auth print-access-token)
        
        # Get uploaded files (remove gs://cbulloss/ prefix)
        UPLOADED=$(echo "${{ steps.upload-website.outputs.uploaded }}" | \
                  sed 's|gs://cbulloss/||g' | tr ',' '\n' | sort)
        
        # Get all bucket files
        ALL_FILES=$(curl -s -H "Authorization: Bearer $TOKEN" \
                    "https://storage.googleapis.com/storage/v1/b/cbulloss/o" | \
                    jq -r '.items[]?.name // empty' | sort)
        
        # Find and count files to delete
        FILES_TO_DELETE=""
        echo "$ALL_FILES" | while IFS= read -r file; do
          if [ -n "$file" ] && ! echo "$UPLOADED" | grep -Fxq "$file"; then
            echo "$file"
          fi
        done > /tmp/files_to_delete.txt
        
        # Count files to delete
        if [ -s /tmp/files_to_delete.txt ]; then
          filesCount=$(wc -l < /tmp/files_to_delete.txt)
          echo "🗑️ Found $filesCount old files to delete:"
          
          # Delete each file
          while IFS= read -r file; do
            echo "Deleting old file: $file"
            curl -s -X DELETE -H "Authorization: Bearer $TOKEN" \
                "https://storage.googleapis.com/storage/v1/b/cbulloss/o/$(echo "$file" | jq -Rr @uri)"
          done < /tmp/files_to_delete.txt
          
          echo "✅ Cleanup complete - deleted $filesCount old files"
        else
          echo "✅ No old files to delete"
        fi
        
        # Clean up temp file
        rm -f /tmp/files_to_delete.txt

#### Likely culprit if invalidation step stops working
#Note: permissions [compute.urlMaps.invalidateCache] are in 'TESTING' stage which means the functionality is not mature and they can go away in the future. 
#This can break your workflows, so do not use them in production systems!
####

    - name: Invalidate CDN Cache
      run: |
        # Invalidate all cached content
        gcloud compute url-maps invalidate-cdn-cache cb-alb \
          --path="/*" \
          --global

    - name: 'Deployment complete'
      run: |
        echo "🎉 Website deployed successfully!"
        echo "📁 Files uploaded: ${{ steps.upload-website.outputs.uploaded }}"